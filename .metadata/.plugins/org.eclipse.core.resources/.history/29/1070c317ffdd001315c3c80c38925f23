import java.awt.Color;
import java.awt.event.ActionEvent;

import javax.swing.*;

import acm.graphics.*;
import acm.program.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.Map;


public class FinalTestNumber2 extends GraphicsProgram {

	public void run() {

		northbutton = new JButton("North");
		southbutton = new JButton("South");
		eastbutton = new JButton("East");
		westbutton = new JButton("West");
		resetbutton = new JButton("Reset");
		add(northbutton, SOUTH);
		add(southbutton, SOUTH);
		add(westbutton, SOUTH);
		add(eastbutton, SOUTH);
		add(resetbutton, SOUTH);
		northbutton.addActionListener(this);
		southbutton.addActionListener(this);
		eastbutton.addActionListener(this);
		westbutton.addActionListener(this);
		resetbutton.addActionListener(this);
		
		//cross = new GCompound();
		centerX = getWidth()/2;
		centerY = getHeight()/2;
//		drawX(centerX, centerY);

		cross = new DrawnX();
		cross.addActionListener(this);
		add(cross, centerX, centerY);
//		pause(1000);
//		cross.move(-20, 0);
//		gobj = cross;
		lastX = centerX;
		lastY = centerY;
		addActionListeners();
		addMouseListeners();
	}
	
	
	
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == northbutton) {
			cross.move(0, -20);
			//drawline
			redline = new GLine(cross.getX(), cross.getY(), cross.getX(), cross.getY()+20 );
		} else if (e.getSource() == southbutton) {
			cross.move(0, 20);
			redline = new GLine(cross.getX(), cross.getY(), cross.getX(), cross.getY()-20 );
		} else if (e.getSource() == eastbutton) {
			cross.move(20, 0);
			redline = new GLine(cross.getX(), cross.getY(), cross.getX()-20, cross.getY() );
		} else if (e.getSource() == westbutton) {
			cross.move(-20, 0);
			redline = new GLine(cross.getX(), cross.getY(), cross.getX()+20, cross.getY() );
		} else if (e.getSource() == resetbutton) {
			for (String key: objMap.keySet()) {
				remove(objMap.get(key));
			}
			remove(redline);
			remove(cross);
			add(cross, centerX, centerY);
		} else {
		}
		redline.setColor(Color.RED);
		add(redline);
		int count = 1;
		objMap.put(String.valueOf(count), redline);

	}
	
	private Map<String, GObject> objMap = new HashMap<String, GObject>();
	
	private double centerX;
	private double centerY;
	private double currentX;
	private double lastX;
	private double currentY;
	private double lastY;
		
	private GObject gobj; //object being dragged

	private DrawnX cross; //object being dragged
	private GPoint last; //last mouse position
	private GLine redline;

	public JButton northbutton;
	private JButton southbutton;
	private JButton eastbutton;
	private JButton westbutton;
	private JButton resetbutton;

//	private GCompound DrawnX;

}


